import UIKit
import Foundation

//1. –°—Ç–≤–æ—Ä–∏—Ç–∏ enum –∑ –º–æ–∂–ª–∏–≤–∏–º–∏ —Ä—É—Ö–∞–º–∏: –≤–ø–µ—Ä–µ–¥, –Ω–∞–∑–∞–¥, –≤–ø—Ä–∞–≤–æ, –≤–ª—ñ–≤–æ. –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ enum-–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—é —Ä—É—Ö—ñ–≤ —Ä–æ–±–æ—Ç–∞: –≤–ø–µ—Ä–µ–¥, –≤–ø–µ—Ä–µ–¥, –≤–ø—Ä–∞–≤–æ, –≤–ø–µ—Ä–µ–¥, –≤–ª—ñ–≤–æ, –Ω–∞–∑–∞–¥. –ù–∞–ø–∏—Å–∞—Ç–∏ —Ü–∏–∫–ª —ñ –ø—Ä–æ–π—Ç–∏—Å—è –ø–æ –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç–∞—Ö enum-a —ñ —Ä–æ–∑–¥—Ä—É–∫—É–≤–∞—Ç–∏ rawValue –∑–Ω–∞—á–µ–Ω—å enum-a. –ü—ñ–¥–∫–∞–∑–∫–∞: —â–æ–± —Ä–æ–∑–¥—Ä—É–∫—É–≤–∞—Ç–∏ rawValue, enum –ø–æ–≤–∏–Ω–µ–Ω –Ω–∞—Å–ª—ñ–¥—É–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–∏–ø—É String.

print("–ó–∞–≤–¥–∞–Ω–Ω—è 1\n")

enum Movement : String {
    case –≤–ø–µ—Ä–µ–¥
    case –Ω–∞–∑–∞–¥
    case –≤–ø—Ä–∞–≤–æ
    case –≤–ª—ñ–≤–æ
            
}
//["–≤–ø–µ—Ä–µ–¥","–≤–ø–µ—Ä–µ–¥","–≤–ø—Ä–∞–≤–æ","–≤–ø–µ—Ä–µ–¥","–≤–ª—ñ–≤–æ","–Ω–∞–∑–∞–¥"]

let enum_A : [Movement] = [.–≤–ø–µ—Ä–µ–¥,.–≤–ø–µ—Ä–µ–¥,.–≤–ø—Ä–∞–≤–æ,.–≤–ø–µ—Ä–µ–¥,.–≤–ª—ñ–≤–æ,.–Ω–∞–∑–∞–¥]

for move in enum_A {
    switch move {
    case .–≤–ø–µ—Ä–µ–¥:
        print("\(move.rawValue)"+"üëÜ")
    case .–Ω–∞–∑–∞–¥:
        print("\(move.rawValue)"+"üëá")
    case .–≤–ø—Ä–∞–≤–æ:
        print("\(move.rawValue)"+"üëâ")
    case .–≤–ª—ñ–≤–æ:
        print("\(move.rawValue)"+"üëà")
    
    }
}
print("\n")

//2. –†–æ–∑–≤'—è–∑–∞—Ç–∏ –∑–∞–¥–∞—á—ñ –Ω–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñ:

//2–∞). Your function takes two arguments: current father's age (years) current age of his son (years). –°alculate how many years ago the father was twice as old as his son (or in how many years he will be twice as old).

print("–ó–∞–≤–¥–∞–Ω–Ω—è 2a\n")

// C—Ç–≤–æ—Ä–∏–≤ —Ç–∏–ø ExampleError –≤–∏–¥—É enum + associated values –¥–ª—è —Ç–æ–≥–æ —â–æ–± –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–æ–º–∏–ª–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–Ω–∞—á–µ–Ω—å –≤ —Ñ—É–Ω–∫—Ü—ñ—ó
enum ExampleError: Error {
    case invalid(contecst : String)
    case uncorrect(contecst : String)
}


func twiceOlder (sonsOld : Int, fathersOld : Int)throws{
    if sonsOld>fathersOld{
        throw ExampleError.invalid(contecst: "Argument sonsOld cant be bigger that value fathersOld ")
    }else if sonsOld == fathersOld{
        throw ExampleError.uncorrect(contecst: "Arguments cant be equal in this function")
    }
    print("–ë–∞—Ç—å–∫—É : \(fathersOld) —Ä–æ–∫—ñ–≤ , —Å–∏–Ω—É : \(sonsOld)")
    if fathersOld/2 >= sonsOld{
        print("–ë–∞—Ç—å–∫–æ –±—É–¥–µ —Å—Ç–∞—Ä—à–∏–π –≤–¥–≤—ñ—á—ñ –∑–∞ —Å–∏–Ω–∞ —á–µ—Ä–µ–∑ \(abs(fathersOld-sonsOld*2)) —Ä–æ–∫—ñ–≤\n")
    }else{
        print("–ë–∞—Ç—å–∫–æ –±—É–≤ —Å—Ç–∞—Ä—à–∏–π –≤–¥–≤—ñ—á—ñ –∑–∞ —Å–∏–Ω–∞ \(abs(fathersOld-sonsOld*2)) —Ä–æ–∫—ñ–≤ —Ç–æ–º—É\n")
        }
}

try twiceOlder(sonsOld: 20, fathersOld: 50)
try twiceOlder(sonsOld: 12, fathersOld: 44)
try twiceOlder(sonsOld: 17, fathersOld: 38)
try twiceOlder(sonsOld: 43, fathersOld: 60)
try twiceOlder(sonsOld: 37, fathersOld: 82)
try twiceOlder(sonsOld: 73, fathersOld: 91)
//–ø–µ—Ä–µ–≤—ñ—Ä–∏–≤ —á–∏ —Å–ø—Ä–∞—Ü—å–æ–≤—É—é—Ç—å –ø–æ–º–∏–ª–∫–∏
//try twiceOlder(sonsOld: 73, fathersOld: 50)
//try twiceOlder(sonsOld: 73, fathersOld: 73)


//(–ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é —ñ –≤–∏–∫–æ–Ω–∞—Ç–∏ —ó—ó –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏. –ü–µ—Ä–µ—Å–≤—ñ–¥—á–∏—Ç–∏—Å—è, —â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ).


//2b). Create a function that converts US dollars (USD) to –ì—Ä–∏–≤–Ω—ñ (UAH). The input is the amount of USD as an integer, and the output should be a string that states the amount of UAH followed by 'UAH' .

//For Example: usduah(1) => 26.80 UAH

//The conversion rate you should use is 26.8 UAH for every 1 USD. All numbers should be represented as a string with 2 decimal places. (e.g. "21.00" NOT "21.0" or "21").

print("–ó–∞–≤–¥–∞–Ω–Ω—è 2b\n")
func convertUsdToUah(amount : Int)->String{
    let exchangeUahRate : Double = 26.8
    let usdInUah : Double = Double(amount) * exchangeUahRate
    return "usduah(\(amount)üí∞) => \(String(format: "%.2f", usdInUah)) UAHüá∫üá¶"
        //
}

convertUsdToUah(amount: 1000)


//2c). Given a two-dimensional array of integers, return the flattened version of the array with all the integers in the sorted (ascending) order. Example: Given [[3, 2, 1], [4, 6, 5], [], [9, 7, 8]], your function should return [1, 2, 3, 4, 5, 6, 7, 8, 9].
print("–ó–∞–≤–¥–∞–Ω–Ω—è 2—Å\n")
func twoIntoOneDimensional(array : [[Int]]) -> [Int]{
    var newArray : [Int] = []
    for i in array{
        for j in i{
            newArray.append(j)
        }
    }
    //–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∫–ª–æ–∂—É—Ä—É –∑–∞–º—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    return newArray.sorted { $0 < $1}
        
}

twoIntoOneDimensional(array: [[3, 2, 1], [4, 6, 5], [], [9, 7, 8]])
